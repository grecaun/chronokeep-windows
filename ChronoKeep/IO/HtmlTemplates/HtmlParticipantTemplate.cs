// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 17.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Chronokeep.IO.HtmlTemplates
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using Chronokeep;
    using Chronokeep.Objects;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "D:\ChronoKeep\ChronoKeepWindows\ChronoKeep\IO\HtmlTemplates\HtmlParticipantTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public partial class HtmlParticipantTemplate : HtmlParticipantTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("\n");
            this.Write("\n");
            this.Write("\n");
            this.Write("\n");
            this.Write("\n");
            this.Write("\n");
            this.Write("\n<!doctype html>\n<html lang=\"en\">\n\t<head>\n\t\t<link rel=\'stylesheet\' href=\'css/boot" +
                    "strap.min.css\'>\n\t\t<link rel=\'stylesheet\' href=\'css/style.min.css\'>\n\t\t<title>");
            
            #line 1 "D:\ChronoKeep\ChronoKeepWindows\ChronoKeep\IO\HtmlTemplates\HtmlParticipantTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(theEvent.Name));
            
            #line default
            #line hidden
            this.Write(" - ");
            
            #line 1 "D:\ChronoKeep\ChronoKeepWindows\ChronoKeep\IO\HtmlTemplates\HtmlParticipantTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(finish != null ? finish.PrettyParticipantName : "Unknown"));
            
            #line default
            #line hidden
            this.Write("</title>\n\t</head>\n\t<body>\n\t\t<div>\n            <div class=\"container-sm m-2 p-4 mx" +
                    "-auto\">\n                <div class=\"p-2\">\n                    <div class=\"text-c" +
                    "enter text-important display-4 m-0\">");
            
            #line 1 "D:\ChronoKeep\ChronoKeepWindows\ChronoKeep\IO\HtmlTemplates\HtmlParticipantTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(theEvent.YearCode));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 1 "D:\ChronoKeep\ChronoKeepWindows\ChronoKeep\IO\HtmlTemplates\HtmlParticipantTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(theEvent.Name));
            
            #line default
            #line hidden
            this.Write(@"</div>
                </div>
                <div class=""mx-auto fit-width mt-3""><a href=""/"" class=""btn btn-secondary"">Back</a></div>
            </div>
            <div class=""container-sm sm-max-width m-5 mt-0 p-4 mx-auto shadow"">
                <div class=""p-2"">
                    <div class=""text-center text-important display-4 m-0"">");
            
            #line 1 "D:\ChronoKeep\ChronoKeepWindows\ChronoKeep\IO\HtmlTemplates\HtmlParticipantTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(finish != null ? finish.PrettyParticipantName : "Unknown"));
            
            #line default
            #line hidden
            this.Write("</div>\n                    <div class=\"text-center text-important text-secondary " +
                    "m-0\">");
            
            #line 1 "D:\ChronoKeep\ChronoKeepWindows\ChronoKeep\IO\HtmlTemplates\HtmlParticipantTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(finish == null ? "" : finish.Gender.Length < 1 || finish.Gender == "Not Specified" ? finish.Age(theEvent.Date) : string.Format("{0} - {1}", finish.Gender, finish.Age(theEvent.Date))));
            
            #line default
            #line hidden
            this.Write("</div>\n                </div>\n                <div class=\"h3 m-2 mt-0 text-center" +
                    " text-important text-secondary mx-auto\">");
            
            #line 1 "D:\ChronoKeep\ChronoKeepWindows\ChronoKeep\IO\HtmlTemplates\HtmlParticipantTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(finish != null ? finish.DistanceName : ""));
            
            #line default
            #line hidden
            this.Write("</div>\n                <div class=\"bib-box h4 m-2 p-2 mx-auto\">");
            
            #line 1 "D:\ChronoKeep\ChronoKeepWindows\ChronoKeep\IO\HtmlTemplates\HtmlParticipantTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(finish != null ? finish.Bib : ""));
            
            #line default
            #line hidden
            this.Write(@"</div>
            </div>
            <div class=""row container-lg lg-max-width shadow mx-auto gx-6 gy-3 pb-3 justify-content-center align-items-center"">
                <div class=""col-lg-8 p-4"">
                    <div class=""row d-flex justify-content-left align-items-center gx-4 gy-3 mb-4"">
                        ");
            
            #line 1 "D:\ChronoKeep\ChronoKeepWindows\ChronoKeep\IO\HtmlTemplates\HtmlParticipantTemplate.tt"
 if (start != null) { 
            
            #line default
            #line hidden
            this.Write("\n                            <div class=\"col col-cst text-center\">\n              " +
                    "                  <div class=\"h5 border-bottom\">Start Time</div>\n               " +
                    "                 <div class=\"h5\">");
            
            #line 1 "D:\ChronoKeep\ChronoKeepWindows\ChronoKeep\IO\HtmlTemplates\HtmlParticipantTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(start.Time.Substring(0, start.Time.Length > 3 ? start.Time.Length -2 : start.Time.Length)));
            
            #line default
            #line hidden
            this.Write("</div>\n                            </div>\n                        ");
            
            #line 1 "D:\ChronoKeep\ChronoKeepWindows\ChronoKeep\IO\HtmlTemplates\HtmlParticipantTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\n                        ");
            
            #line 1 "D:\ChronoKeep\ChronoKeepWindows\ChronoKeep\IO\HtmlTemplates\HtmlParticipantTemplate.tt"
 if (finish != null && finish.Finish) { 
            
            #line default
            #line hidden
            this.Write("\n                            <div class=\"col col-cst text-center\">\n              " +
                    "                  <div class=\"h5 border-bottom\">Chip Time</div>\n                " +
                    "                <div class=\"h5\">");
            
            #line 1 "D:\ChronoKeep\ChronoKeepWindows\ChronoKeep\IO\HtmlTemplates\HtmlParticipantTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(finish.ChipTime.Substring(0, finish.ChipTime.Length > 3 ? finish.ChipTime.Length -2 : finish.ChipTime.Length)));
            
            #line default
            #line hidden
            this.Write("</div>\n                            </div>\n                        ");
            
            #line 1 "D:\ChronoKeep\ChronoKeepWindows\ChronoKeep\IO\HtmlTemplates\HtmlParticipantTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\n                        ");
            
            #line 1 "D:\ChronoKeep\ChronoKeepWindows\ChronoKeep\IO\HtmlTemplates\HtmlParticipantTemplate.tt"
 if (finish != null && finish.Finish) { 
            
            #line default
            #line hidden
            this.Write("\n                            <div class=\"col col-cst text-center\">\n              " +
                    "                  <div class=\"h5 border-bottom\">Time</div>\n                     " +
                    "           <div class=\"h5\">");
            
            #line 1 "D:\ChronoKeep\ChronoKeepWindows\ChronoKeep\IO\HtmlTemplates\HtmlParticipantTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(finish != null ? finish.Time.Substring(0, finish.Time.Length > 3 ? finish.Time.Length -2 : finish.Time.Length) : ""));
            
            #line default
            #line hidden
            this.Write("</div>\n                            </div>\n                        ");
            
            #line 1 "D:\ChronoKeep\ChronoKeepWindows\ChronoKeep\IO\HtmlTemplates\HtmlParticipantTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\n                    </div>\n                    ");
            
            #line 1 "D:\ChronoKeep\ChronoKeepWindows\ChronoKeep\IO\HtmlTemplates\HtmlParticipantTemplate.tt"
 if (finish != null && finish.Finish && finish.Place > 0) { 
            
            #line default
            #line hidden
            this.Write(@"
                        <div class=""row d-flex justify-content-center align-items-center gx-4 gy-3"">
                            <div class=""col-sm-4 text-center"">
                                <div class=""h5 border-bottom"">Overall</div>
                                <div class=""h5"">");
            
            #line 1 "D:\ChronoKeep\ChronoKeepWindows\ChronoKeep\IO\HtmlTemplates\HtmlParticipantTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(finish.Place));
            
            #line default
            #line hidden
            this.Write("</div>\n                            </div>\n                            ");
            
            #line 1 "D:\ChronoKeep\ChronoKeepWindows\ChronoKeep\IO\HtmlTemplates\HtmlParticipantTemplate.tt"
 if (finish.GenderPlace > 0) { 
            
            #line default
            #line hidden
            this.Write("\n                                <div class=\"col-sm-4 text-center\">\n             " +
                    "                       <div class=\"h5 border-bottom\">");
            
            #line 1 "D:\ChronoKeep\ChronoKeepWindows\ChronoKeep\IO\HtmlTemplates\HtmlParticipantTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(rankingGender));
            
            #line default
            #line hidden
            this.Write("</div>\n                                    <div class=\"h5\">");
            
            #line 1 "D:\ChronoKeep\ChronoKeepWindows\ChronoKeep\IO\HtmlTemplates\HtmlParticipantTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(finish.GenderPlace));
            
            #line default
            #line hidden
            this.Write("</div>\n                                </div>\n                            ");
            
            #line 1 "D:\ChronoKeep\ChronoKeepWindows\ChronoKeep\IO\HtmlTemplates\HtmlParticipantTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\n                            ");
            
            #line 1 "D:\ChronoKeep\ChronoKeepWindows\ChronoKeep\IO\HtmlTemplates\HtmlParticipantTemplate.tt"
 if (finish.Gender.Length > 0 && finish.AgeGroupName.Length > 0 && finish.AgePlace > 0) { 
            
            #line default
            #line hidden
            this.Write("\n                                <div class=\"col-sm-4 text-center\">\n             " +
                    "                       <div class=\"h5 border-bottom\">");
            
            #line 1 "D:\ChronoKeep\ChronoKeepWindows\ChronoKeep\IO\HtmlTemplates\HtmlParticipantTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(string.Format("{0} {1}", rankingGender, finish.AgeGroupName)));
            
            #line default
            #line hidden
            this.Write("</div>\n                                    <div class=\"h5\">");
            
            #line 1 "D:\ChronoKeep\ChronoKeepWindows\ChronoKeep\IO\HtmlTemplates\HtmlParticipantTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(finish.AgePlace));
            
            #line default
            #line hidden
            this.Write("</div>\n                                </div>\n                            ");
            
            #line 1 "D:\ChronoKeep\ChronoKeepWindows\ChronoKeep\IO\HtmlTemplates\HtmlParticipantTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\n                        </div>\n                    ");
            
            #line 1 "D:\ChronoKeep\ChronoKeepWindows\ChronoKeep\IO\HtmlTemplates\HtmlParticipantTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\n                </div>\n            </div>\n            ");
            
            #line 1 "D:\ChronoKeep\ChronoKeepWindows\ChronoKeep\IO\HtmlTemplates\HtmlParticipantTemplate.tt"
 if (resultList.Count > 0) { 
            
            #line default
            #line hidden
            this.Write("\n                <div class=\"container-lg lg-max-width m-4 mx-auto shadow p-5\">\n " +
                    "                   <table class=\"table table-sm text-center\">\n                  " +
                    "      ");
            
            #line 1 "D:\ChronoKeep\ChronoKeepWindows\ChronoKeep\IO\HtmlTemplates\HtmlParticipantTemplate.tt"
 if (theEvent.EventType == Constants.Timing.EVENT_TYPE_TIME) { 
            
            #line default
            #line hidden
            this.Write(@"
                            <thead>
                                <tr>
                                    <th class=""table-distance-header text-important text-center"" colSpan=""6"">Lap Times</th>
                                </tr>
                                <tr>
                                    <th></th>
                                    <th class=""overflow-hidden-sm"">Lap Time</th>
                                    <th>Total Time</th>
                                </tr>
                            </thead>
                            <tbody>
                                ");
            
            #line 1 "D:\ChronoKeep\ChronoKeepWindows\ChronoKeep\IO\HtmlTemplates\HtmlParticipantTemplate.tt"
 foreach (TimeResult r in resultList) { 
            
            #line default
            #line hidden
            this.Write("\n                                    <tr key=\"");
            
            #line 1 "D:\ChronoKeep\ChronoKeepWindows\ChronoKeep\IO\HtmlTemplates\HtmlParticipantTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(string.Format("segment-{0}-{1}", r.LocationId, r.Occurrence)));
            
            #line default
            #line hidden
            this.Write("\">\n                                        <td>");
            
            #line 1 "D:\ChronoKeep\ChronoKeepWindows\ChronoKeep\IO\HtmlTemplates\HtmlParticipantTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture((r.SegmentName == "Finish")? string.Format("Lap {0}", r.Occurrence) : r.SegmentName));
            
            #line default
            #line hidden
            this.Write("</td>\n                                        <td class=\"overflow-hidden-sm\">");
            
            #line 1 "D:\ChronoKeep\ChronoKeepWindows\ChronoKeep\IO\HtmlTemplates\HtmlParticipantTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(r.Time.Substring(0, r.Time.Length > 3 ? r.Time.Length -2 : r.Time.Length)));
            
            #line default
            #line hidden
            this.Write("</td>\n                                        <td>");
            
            #line 1 "D:\ChronoKeep\ChronoKeepWindows\ChronoKeep\IO\HtmlTemplates\HtmlParticipantTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(r.ChipTime.Substring(0, r.Time.Length > 3 ? r.Time.Length -2 : r.Time.Length)));
            
            #line default
            #line hidden
            this.Write("</td>\n                                    </tr>\n                                ");
            
            #line 1 "D:\ChronoKeep\ChronoKeepWindows\ChronoKeep\IO\HtmlTemplates\HtmlParticipantTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\n                            </tbody>\n                        ");
            
            #line 1 "D:\ChronoKeep\ChronoKeepWindows\ChronoKeep\IO\HtmlTemplates\HtmlParticipantTemplate.tt"
 } else { 
            
            #line default
            #line hidden
            this.Write(@"
                            <thead>
                                    <tr>
                                        <th class=""table-distance-header text-important text-center"" colSpan=""6"">Partial Times</th>
                                    </tr>
                                    <tr>
                                        <th>Segment</th>
                                        <th class=""overflow-hidden-sm"">Place</th>
                                        <th class=""overflow-hidden-sm"">Age Pl</th>
                                        <th class=""overflow-hidden-sm"">Gender Pl</th>
                                        <th>Time</th>
                                    </tr>
                                </thead>
                                <tbody>
                                ");
            
            #line 1 "D:\ChronoKeep\ChronoKeepWindows\ChronoKeep\IO\HtmlTemplates\HtmlParticipantTemplate.tt"
 foreach (TimeResult r in resultList) { 
            
            #line default
            #line hidden
            this.Write("\n                                    <tr key=\"");
            
            #line 1 "D:\ChronoKeep\ChronoKeepWindows\ChronoKeep\IO\HtmlTemplates\HtmlParticipantTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(string.Format("segment-{0}-{1}", r.LocationId, r.Occurrence)));
            
            #line default
            #line hidden
            this.Write("\">\n                                        <td class=\"overflow-hidden-sm\">");
            
            #line 1 "D:\ChronoKeep\ChronoKeepWindows\ChronoKeep\IO\HtmlTemplates\HtmlParticipantTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(r.Place > 0 ? r.Place : ""));
            
            #line default
            #line hidden
            this.Write("</td>\n                                        <td class=\"overflow-hidden-sm\">");
            
            #line 1 "D:\ChronoKeep\ChronoKeepWindows\ChronoKeep\IO\HtmlTemplates\HtmlParticipantTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(r.AgePlace > 0 ? r.AgePlace : ""));
            
            #line default
            #line hidden
            this.Write("</td>\n                                        <td class=\"overflow-hidden-sm\">");
            
            #line 1 "D:\ChronoKeep\ChronoKeepWindows\ChronoKeep\IO\HtmlTemplates\HtmlParticipantTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(r.GenderPlace > 0 ? r.GenderPlace : ""));
            
            #line default
            #line hidden
            this.Write("</td>\n                                        <td>");
            
            #line 1 "D:\ChronoKeep\ChronoKeepWindows\ChronoKeep\IO\HtmlTemplates\HtmlParticipantTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(r.ChipTime.Substring(0, r.Time.Length > 3 ? r.Time.Length -2 : r.Time.Length)));
            
            #line default
            #line hidden
            this.Write("</td>\n                                    </tr>\n                                ");
            
            #line 1 "D:\ChronoKeep\ChronoKeepWindows\ChronoKeep\IO\HtmlTemplates\HtmlParticipantTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\n                            </tbody>\n                        ");
            
            #line 1 "D:\ChronoKeep\ChronoKeepWindows\ChronoKeep\IO\HtmlTemplates\HtmlParticipantTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\n                    </table>\n                </div>\n            ");
            
            #line 1 "D:\ChronoKeep\ChronoKeepWindows\ChronoKeep\IO\HtmlTemplates\HtmlParticipantTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\n\t\t</div>\n\t\t<script type=\"text/javascript\" src=\'js/jquery.min.js\'></script>\n\t\t<sc" +
                    "ript type=\"text/javascript\" src=\'js/bootstrap.min.js\'></script>\n\t</body>\n</html>" +
                    "");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public class HtmlParticipantTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        public System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
