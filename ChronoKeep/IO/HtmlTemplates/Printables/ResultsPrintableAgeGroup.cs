// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 17.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Chronokeep.IO.HtmlTemplates.Printables
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using Chronokeep;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "D:\ChronoKeep\ChronoKeepWindows\ChronoKeep\IO\HtmlTemplates\Printables\ResultsPrintableAgeGroup.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public partial class ResultsPrintableAgeGroup : ResultsPrintableAgeGroupBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("\n");
            this.Write("\n");
            this.Write("\n");
            this.Write("\n");
            this.Write("\n");
            this.Write(@"
<html>
	<head>
		<style type=""text/css"">
			/*
			 * Set website details.
			 */
			.text-center {
			  text-align: center;
			}
			/**
			 * Table options for results.
			 */
			.table-header {
			  text-align: center;
			  font-size: 26px;
			  padding: 0px;
			  margin-top: 0px;
			  margin-bottom: 2px;
			}
			.table-h3 {
			  text-align: center;
			  font-size: 22px;
			  padding: 0px;
			  margin-top: 0px;
			  margin-bottom: 4px;
			}
			.table-h4 {
			  text-align: center;
			  font-size: 18px;
			  padding: 0px;
			  margin-top: 0px;
			  margin-bottom: 4px;
			}
			.header-margin-top {
		      margin-top: 20px;
			}
			.table-label {
			  font-size: 18px;
			}
			.table-info {
			  text-align: center;
			  padding-top: 4px;
			}
			table {
			  min-width: 360px;
			  overflow: hidden;
			  margin-top: 20px;
			}
			.panel-center {
			  text-align: center;
			}
			td {
			  padding: 5px;
			  text-align: center;
			  border: 1px solid #E7E7E7;
			}
			table {
			  width: 100%;
			  border-collapse: collapse;
			  border-radius: 10px;
			  border-style: hidden;
			  box-shadow: 0 0 0 1px #E7E7E7;
			}
		</style>
	</head>
	<body>
		<div class='text-important table-header'>");
            
            #line 1 "D:\ChronoKeep\ChronoKeepWindows\ChronoKeep\IO\HtmlTemplates\Printables\ResultsPrintableAgeGroup.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(theEvent.YearCode));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 1 "D:\ChronoKeep\ChronoKeepWindows\ChronoKeep\IO\HtmlTemplates\Printables\ResultsPrintableAgeGroup.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(theEvent.Name));
            
            #line default
            #line hidden
            this.Write("</div>\n\t\t<div class=\'text-important table-h3\'>Age Group Results</div>\n\t\t<div clas" +
                    "s=\'text-important table-h4\'>");
            
            #line 1 "D:\ChronoKeep\ChronoKeepWindows\ChronoKeep\IO\HtmlTemplates\Printables\ResultsPrintableAgeGroup.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(theEvent.Date));
            
            #line default
            #line hidden
            this.Write("</div>\n\t\t<div class=\'events-panel panel panel-default\'>\n\t\t\t");
            
            #line 1 "D:\ChronoKeep\ChronoKeepWindows\ChronoKeep\IO\HtmlTemplates\Printables\ResultsPrintableAgeGroup.tt"
 foreach (string d in distanceResults.Keys.OrderBy(i => i))
			{ 
            
            #line default
            #line hidden
            this.Write("\n\t\t\t<div>\n\t\t\t\t<div class=\'text-important table-header header-margin-top\'>");
            
            #line 1 "D:\ChronoKeep\ChronoKeepWindows\ChronoKeep\IO\HtmlTemplates\Printables\ResultsPrintableAgeGroup.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(d));
            
            #line default
            #line hidden
            this.Write("</div>\n\t\t\t\t");
            
            #line 1 "D:\ChronoKeep\ChronoKeepWindows\ChronoKeep\IO\HtmlTemplates\Printables\ResultsPrintableAgeGroup.tt"
 foreach ((int AgeGroupID, string gender) in distanceResults[d].Keys.OrderBy(c => c.Item2).ThenBy(i => ageGroups[i.Item1].StartAge))
				{ 
            
            #line default
            #line hidden
            this.Write("\n\t\t\t\t\t<table>\n\t\t\t\t\t\t<tr><td colspan=\'9\' class=\'table-header text-important\'>");
            
            #line 1 "D:\ChronoKeep\ChronoKeepWindows\ChronoKeep\IO\HtmlTemplates\Printables\ResultsPrintableAgeGroup.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(string.Format("{0} {1} - {2}", gender.Equals("M", System.StringComparison.OrdinalIgnoreCase) ? "Male" : "Female", ageGroups[AgeGroupID].StartAge, ageGroups[AgeGroupID].EndAge)));
            
            #line default
            #line hidden
            this.Write(@"</td></tr>
						<tr>
							<td class=""text-important table-label"">Place</td>
							<td class=""text-important table-label""></td>
							<td class=""text-important table-label"">Bib</td>
							<td class=""text-important table-label"">Name</td>
							<td class=""text-important table-label"">G</td>
							<td class=""text-important table-label"">Age</td>
							<td class=""text-important table-label"">Overall</td>
							<td class=""text-important table-label"">Finish Gun</td>
							<td class=""text-important table-label"">Finish Chip</td>
						</tr>
						");
            
            #line 1 "D:\ChronoKeep\ChronoKeepWindows\ChronoKeep\IO\HtmlTemplates\Printables\ResultsPrintableAgeGroup.tt"
 foreach (TimeResult r in distanceResults[d][(AgeGroupID, gender)])
						{ 
            
            #line default
            #line hidden
            this.Write("\n\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t<td>");
            
            #line 1 "D:\ChronoKeep\ChronoKeepWindows\ChronoKeep\IO\HtmlTemplates\Printables\ResultsPrintableAgeGroup.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(r.AgePlaceStr));
            
            #line default
            #line hidden
            this.Write("</td>\n\t\t\t\t\t\t\t<td>");
            
            #line 1 "D:\ChronoKeep\ChronoKeepWindows\ChronoKeep\IO\HtmlTemplates\Printables\ResultsPrintableAgeGroup.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(r.PrettyType));
            
            #line default
            #line hidden
            this.Write("</td>\n\t\t\t\t\t\t\t<td>");
            
            #line 1 "D:\ChronoKeep\ChronoKeepWindows\ChronoKeep\IO\HtmlTemplates\Printables\ResultsPrintableAgeGroup.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(r.Bib.ToString()));
            
            #line default
            #line hidden
            this.Write("</td>\n\t\t\t\t\t\t\t<td>");
            
            #line 1 "D:\ChronoKeep\ChronoKeepWindows\ChronoKeep\IO\HtmlTemplates\Printables\ResultsPrintableAgeGroup.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(r.ParticipantName));
            
            #line default
            #line hidden
            this.Write("</td>\n\t\t\t\t\t\t\t<td>");
            
            #line 1 "D:\ChronoKeep\ChronoKeepWindows\ChronoKeep\IO\HtmlTemplates\Printables\ResultsPrintableAgeGroup.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(participantDictionary[r.EventSpecificId].Gender));
            
            #line default
            #line hidden
            this.Write("</td>\n\t\t\t\t\t\t\t<td>");
            
            #line 1 "D:\ChronoKeep\ChronoKeepWindows\ChronoKeep\IO\HtmlTemplates\Printables\ResultsPrintableAgeGroup.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(participantDictionary[r.EventSpecificId].Age(theEvent.Date)));
            
            #line default
            #line hidden
            this.Write("</td>\n\t\t\t\t\t\t\t<td>");
            
            #line 1 "D:\ChronoKeep\ChronoKeepWindows\ChronoKeep\IO\HtmlTemplates\Printables\ResultsPrintableAgeGroup.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(r.PlaceStr));
            
            #line default
            #line hidden
            this.Write("</td>\n\t\t\t\t\t\t\t<td>");
            
            #line 1 "D:\ChronoKeep\ChronoKeepWindows\ChronoKeep\IO\HtmlTemplates\Printables\ResultsPrintableAgeGroup.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(r.Time.Substring(0, r.Time.Length > 3 ? r.Time.Length -2 : r.Time.Length)));
            
            #line default
            #line hidden
            this.Write("</td>\n\t\t\t\t\t\t\t<td>");
            
            #line 1 "D:\ChronoKeep\ChronoKeepWindows\ChronoKeep\IO\HtmlTemplates\Printables\ResultsPrintableAgeGroup.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(r.ChipTime.Substring(0, r.ChipTime.Length > 3 ? r.ChipTime.Length -2 : r.ChipTime.Length)));
            
            #line default
            #line hidden
            this.Write("</td>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t");
            
            #line 1 "D:\ChronoKeep\ChronoKeepWindows\ChronoKeep\IO\HtmlTemplates\Printables\ResultsPrintableAgeGroup.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\n\t\t\t\t\t\t");
            
            #line 1 "D:\ChronoKeep\ChronoKeepWindows\ChronoKeep\IO\HtmlTemplates\Printables\ResultsPrintableAgeGroup.tt"
  if (dnfResultsDictionary.ContainsKey(d) && dnfResultsDictionary[d].ContainsKey((AgeGroupID, gender)))
						{
							foreach (TimeResult r in dnfResultsDictionary[d][(AgeGroupID, gender)])
							{ 
            
            #line default
            #line hidden
            this.Write("\n\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t<td></td>\n\t\t\t\t\t\t\t\t<td>");
            
            #line 1 "D:\ChronoKeep\ChronoKeepWindows\ChronoKeep\IO\HtmlTemplates\Printables\ResultsPrintableAgeGroup.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(r.PrettyType));
            
            #line default
            #line hidden
            this.Write("</td>\n\t\t\t\t\t\t\t\t<td>");
            
            #line 1 "D:\ChronoKeep\ChronoKeepWindows\ChronoKeep\IO\HtmlTemplates\Printables\ResultsPrintableAgeGroup.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(r.Bib.ToString()));
            
            #line default
            #line hidden
            this.Write("</td>\n\t\t\t\t\t\t\t\t<td>");
            
            #line 1 "D:\ChronoKeep\ChronoKeepWindows\ChronoKeep\IO\HtmlTemplates\Printables\ResultsPrintableAgeGroup.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(r.ParticipantName));
            
            #line default
            #line hidden
            this.Write("</td>\n\t\t\t\t\t\t\t\t<td>");
            
            #line 1 "D:\ChronoKeep\ChronoKeepWindows\ChronoKeep\IO\HtmlTemplates\Printables\ResultsPrintableAgeGroup.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(participantDictionary[r.EventSpecificId].Gender));
            
            #line default
            #line hidden
            this.Write("</td>\n\t\t\t\t\t\t\t\t<td>");
            
            #line 1 "D:\ChronoKeep\ChronoKeepWindows\ChronoKeep\IO\HtmlTemplates\Printables\ResultsPrintableAgeGroup.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(participantDictionary[r.EventSpecificId].Age(theEvent.Date)));
            
            #line default
            #line hidden
            this.Write("</td>\n\t\t\t\t\t\t\t\t<td></td>\n\t\t\t\t\t\t\t\t<td>DNF</td>\n\t\t\t\t\t\t\t\t<td>DNF</td>\n\t\t\t\t\t\t\t</tr>\n\t\t" +
                    "\t\t\t\t");
            
            #line 1 "D:\ChronoKeep\ChronoKeepWindows\ChronoKeep\IO\HtmlTemplates\Printables\ResultsPrintableAgeGroup.tt"
 }} 
            
            #line default
            #line hidden
            this.Write("\n\t\t\t\t\t</table>\n\t\t\t\t");
            
            #line 1 "D:\ChronoKeep\ChronoKeepWindows\ChronoKeep\IO\HtmlTemplates\Printables\ResultsPrintableAgeGroup.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\n\t\t\t</div>\n\t\t\t");
            
            #line 1 "D:\ChronoKeep\ChronoKeepWindows\ChronoKeep\IO\HtmlTemplates\Printables\ResultsPrintableAgeGroup.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\n\t\t</div>\n\t</body>\n</html>");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public class ResultsPrintableAgeGroupBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
