# This is a continuous delivery pipeline for github meant to deploy Chronokeep whenever a tag is pushed.
#
name: Chronokeep Continuous Delivery

on:
  workflow_dispatch:

  push:
    tags:
      - '*'

jobs:
  build:
    runs-on: windows-latest

    env:
      SigningCertificate: Chronokeep\Chronokeep.pfx
      Solution_Path: Chronokeep.sln
      App_Packages_Archive: chronokeep-setup.exe
      App_Zip_Archive: chronokeep.zip
      Compile_Path: Chronokeep\bin\Release\net9.0-windows8.0
      Version_Path: ChronoKeep\version.txt
      Actions_Allow_Unsecure_Commands: true # Allows AddPAth and SetEnv commands

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '7.x'

    # Add  MsBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.1

    # Setup Nuget to restore packages
    - name: Setup Nuget
      uses: Nuget/setup-nuget@v1

    # Restore Nuget Packages
    - name: Restore Nuget Packages
      run: nuget restore $env:Solution_Path

    # Generate version text file because msbuild isn't generating it properly
    - name: Generate version text file
      run: git describe --tag > $env:Version_Path

    # Build the app for Release
    - name: Build program
      run: msbuild $env:Solution_Path /p:Platform="Any CPU" /p:Configuration=Release

    # Set an environment variable to the tag we want to use to describe this release.
    - name: Get tag environment variable.
      run: echo "RELEASE_VERSION=$(git describe --tag)" >> $GITHUB_OUTPUT
      id: release-version

    # Run Inno Setup
    - name: Create setup with Inno Setup
      run: .\Inno\ISCC.exe /DMyAppVersion=${{ steps.release-version.outputs.RELEASE_VERSION }} /DMyAppDirectory=$env:Compile_Path /O$env:Compile_Path /SCompression=bzip2 .\install-script.iss

    # Create zip
    - name: Create zip of all files.
      run: Compress-Archive -Path $env:Compile_Path\* -Destination $env:Compile_Path\$env:App_Zip_Archive

    # Create the release
    - name: Create release
      id: create_release
      uses: ncipollo/release-action@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        tag: ${{ steps.release-version.outputs.RELEASE_VERSION }}

    # Upload installer
    - name: Update installer
      id: upload-installer
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: ${{ env.Compile_Path }}\${{ env.App_Packages_Archive }}

      
    # Upload archive
    - name: Update archive
      id: upload-archive
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: ${{ env.Compile_Path }}\${{ env.App_Zip_Archive }}